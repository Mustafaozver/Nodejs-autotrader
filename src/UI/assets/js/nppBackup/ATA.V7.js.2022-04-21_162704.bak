/*

	* --------------------------------------------------------------------------
	*
	* ATA.js (V7.0 Beta) : ATA.js
	* Licensed under MIT (https://github.com/mustafaozver/atajs/blob/master/LICENSE)
	* Copyright 2022 ATA Inc. All rights reserved.
	*
	* --------------------------------------------------------------------------

*/

var NAME = "";
var VERSION = "";
var DESCRIPTION = "";
var COPYRIGHT = "";

if(typeof ATA === "undefined")(ATA=function(GLOBAL){
	if(!Infinity)var Infinity = 99999999999999999;
	var PInfinity = 0.0000000000000001;
	var PrivateKey = function(name){return Symbol(name)};
	var _ = PrivateKey("ATA");
	var loc = ""; // __dirname
	var mCode = "" + GLOBAL.ATA;
	//GLOBAL._ = PrivateKey("ATA");
	var FormatTime = function(oMsec) {
		var ftext = "[Y-M-D] [H:m:S]";
		var micSec = oMsec % 1000;
		var totalcount = Math.floor(oMsec/1000);
		var sec = totalcount%60;
		totalcount = Math.floor(totalcount/60);
		var min = totalcount%60;
		totalcount = Math.floor(totalcount/60);
		var hour = totalcount%24;
		totalcount = Math.floor(totalcount/24);
		var day = totalcount%30;
		totalcount = Math.floor(totalcount/30);
		var month = totalcount%12;
		var year = Math.floor(totalcount/12);
		if(year == 0){
			ftext = ftext.replace("Y-","");
			if(month == 0){
				ftext = ftext.replace("M-","");
				if(day == 0){
					ftext = ftext.replace("[D] ","");
					if(hour == 0){
						ftext = ftext.replace("H:","");
					}
				}
			}
		}
		ftext = ftext.replace("Y",year);
		ftext = ftext.replace("M",(month/100).toFixed(2).substr(2));
		ftext = ftext.replace("D",(day/100).toFixed(2).substr(2));
		ftext = ftext.replace("H",(hour/100).toFixed(2).substr(2));
		ftext = ftext.replace("m",(min/100).toFixed(2).substr(2));
		ftext = ftext.replace("S",(sec/100).toFixed(2).substr(2)+(micSec/1000).toFixed(3).substr(1));
		return ftext;
	};
	var checkInterval = false;
	var ATA = function(){};
	Object.assign(ATA.prototype,{
		LoopTime:1000,
		StartTime:(new Date()).getTime(),
		valueOf:function(){
			return this.Version;
		},
		toString:function(){
			return ATA.Name + " V(" + ATA.Version + ")";
		},
		ID:{
			UUID:("xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx").replace(/[xy]/g,function(c){
				var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
				return v.toString(16);
			}).toUpperCase(),
		}
	});
	var ATA = new ATA();
	Object.assign(ATA,{
		LastActivite:0,
		Settings:{
			ID:"",
			ROOT:loc + "\\NODE_TRADER\\"
		},
		Loops:[],
		Setups:[],
		UUID:{
			varIDs:{},
			Generate:function(){
				var len = 16;
				var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";
				while(true){
					var text = "_";
					for(var i=0;i<len;i++)text += chars.charAt(Math.floor(chars.length*Math.random()));
					if(!this.varIDs[text]){
						this.varIDs[text] = true;
						return text;
					}
				}
			},
		},
		Log:function(message){
			if(!this.isDebug)return;
			var thisDate = new Date();
			var text = "";
			text += "|\t[" + thisDate.getTime() + "]" + thisDate,"\t" + FormatTime(thisDate.getTime() - this.StartTime) + "\n\r";
			text += "|\tSystem : " + message + "\n\r";
			console.log(text);
			this.LOGs___[(new Date()).getTime()] = message;
		},LOGs___:{},
		CheckSystem:async function(){ // Check system
			if(this.Setups.length > 0){
				this.Log("ATA is starting...");
				await this.Setup();
				this.Log("ATA is started.");
				return;
			}
			this.Loop();
			this.Log("ATA is alive.");
		},
		Setup:async function(){ // Setup function
			while(this.Setups.length > 0){
				var tempf = this.Setups.shift();
				try{
					await tempf.apply(this,[this.LastActivite]);
				}catch(e){
					console.warn(e,tempf);
					this.Setups.push(tempf);
				}
			}
			if(!checkInterval)checkInterval = setInterval(function(){ // 1234567890
				var time =(new Date()).getTime();
				if(ATA.LastActivite+ATA.LoopTime*10 < time){
					ATA.Loop();
					console.clear();
					ATA.Log("ATA is restarted.\n Because unexpectedly ATA had stopped.");
				}
			},this.LoopTime*10);
			this.Setups = [];
			this.CheckSystem();
		},
		Loop:async function(){
			var newdate = new Date();
			for(var i=0;i<this.Loops.length;i++){
				try{
					this.Loops[i].apply(this,[newdate]);
					this.Log("ATA cycled " + this.Loops.length + " function(s) successfuly.");
				}catch(e){
					this.Log(e);
				}
			}
		},
		Set:function(key,value){
			key = "m_" + key;
			this[key] = value;
		},
		Get:function(key){
			key = "m_" + key;
			return this[key];
		},
	});
	Object.assign(ATA, {
		Name		: "ATA.JS for Node.JS",
		Version		: "Beta 7.0.0.0-00",
		Description	: "",
		CopyRight	: "Copyright (C) 2022",
		isReady		: false,
		isDebug		: false,
	});
	ATA.GLOBAL = GLOBAL;
	//GLOBAL.ATA = ATA;
	ATA.Settings.ID = "ATAV7_" + ATA.UUID.Generate();
	NAME = ATA.Name;
	VERSION = ATA.Version;
	DESCRIPTION = ATA.Description;
	COPYRIGHT = ATA.CopyRight;
	GLOBAL["ATA"] = function(){
		return ATA;
	};
	
	ATA.Classes = {};
	ATA.CreateClass = function(oName){
		var ClassName = "" + oName;
		ATA.Classes[ClassName] = function(){
			this.ID = ClassName + ATA.UUID.Generate();
			this.Arguments = arguments;
			var THAT = this;
			this.OnCreate();
			ATA.Classes[ClassName].Objects[this.ID] = this;
		};
		ATA.Classes[ClassName].prototype.OnCreate = function(){};
		ATA.Classes[ClassName].prototype.Loop = function(){};
		ATA.Classes[ClassName].Objects = {};
		ATA.Classes[ClassName].Config = {};
		ATA.Classes[ClassName].Set = function(key, value){
			this.prototype["" + key] = value;
		};
		ATA.Classes[ClassName].SetStatic = function(key, value){
			this["" + key] = value;
		};
		return ATA.Classes[ClassName];
	};
	ATA.Loops.push(function(){
		for(var classname in ATA.Classes){
			var _class = ATA.Classes[classname].Objects;
			for(var objectname in _class){
				ATA.Classes[classname].Objects[objectname].Loop();
			}
		}
	});
	
	setTimeout(async function(){ // Start trigger
		setInterval(function(){ // Time => /|. Clock
			var thisTime = (new Date()).getTime();
			var PivotTime = thisTime % ATA.LoopTime;
			var lastPivotTime = ATA.LastActivite % ATA.LoopTime;
			if(PivotTime < lastPivotTime){
				ATA.CheckSystem();
			}
			ATA.LastActivite = thisTime;
			var title = ATA.Name + " V(" + ATA.Version + ") " + (new Date(thisTime)) + " " + FormatTime(thisTime - ATA.StartTime);
			//console.log(Instrument.Instruments);
			//process.stdout.write(String.fromCharCode(27) + "]0;" + title + String.fromCharCode(7));
			//console.log(title);
		},50);
	},10);
	try{
		module.exports = ATA;
	}catch(e){}
})((function(){return this})());
else throw new Error("ATA is already called.");



if(!ATA)throw new Error("ATA is required.");

ATA().Setups.push(function(){
    console.log("Setup");
	this.Variable1 = "The time";
});

ATA().Loops.push(function(){
    console.log(this.Variable1 + " is " + (new Date()).toLocaleTimeString());
});

//////////////////////////////////////////////////////////////////////////

